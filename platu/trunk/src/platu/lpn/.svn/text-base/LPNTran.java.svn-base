package platu.lpn;

import platu.common.*;
import platu.expression.Expression;
import platu.expression.ExpressionError;
import platu.expression.VarNode;
import platu.main.Options;
import platu.stategraph.*;
import platu.util.Pair;
import platu.BinaryTree.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

public class LPNTran {

    public static final int[] toArray(Collection<Integer> set) {
        int[] arr = new int[set.size()];
        int idx = 0;
        for (int i : set) {
            arr[idx++] = i;
        }
        return arr;
    }
    
    /* LPN where this transition is defined. */
    private LPN lpn;
    
    /* Transition labels in the same LPN must be unique. */
    private String label;   
    
    /* Index of this transition in the this.lpn. */
    private int index;
    
    private int hashVal = -1;
    
    private int[] preSet;
    private int[] postSet;
    
    private Expression enablingGuard; // Enabling condition
    
    private VarExprList assignments = new VarExprList();
    
    private int delayLB;  // Lower bound of the delay
    private int delayUB;  // Upper bound of the delay.
    
    /* Variables on LHS of assignments of this transition. */
    private HashSet<VarNode> assignedVarSet;
    
    /* Variables in the enablingGuard and in the expressions on RHS of assignments. */
    private HashSet<String> supportSet;
    
    /* True if all variables in assignedVarSet are in the set 'internals' of this.lpn. */
    private boolean local = true;
    
    /* A set of Boolean formulas that should hold after firing this transition. */
    private ArrayList<Expression> assertions = new ArrayList<Expression>(1);
    
    /* LPNs that share variables in the assignedVarSet of this transition. */
    private Set<LPN> dstLpnList = new HashSet<LPN>();
    
    /* true indicating this transition follows non-disabling semantics. */
    private boolean stickyFlag = true;
        
    public int time = 0;
    
    
    public LPNTran(String Label, int index, Collection<Integer> preSet, Collection<Integer> postSet,
            Expression enablingGuard, VarExprList assignments, int DelayLB, int DelayUB, boolean local) {
        //this.lpnModel=lpnModel;
        this.label = Label;
        this.index = index;
        this.preSet = toArray(preSet);
        this.postSet = toArray(postSet);
        this.enablingGuard = enablingGuard;
        this.assignments = assignments;
        this.delayLB = DelayLB;
        this.delayUB = DelayUB;
        this.local = local;

        if (preSet == null || postSet == null || enablingGuard == null || assignments == null) {
            new NullPointerException().printStackTrace();
        }
    }
    
    public LPNTran(String Label, int index, int[] preSet, int[] postSet, Expression enablingGuard, 
    		VarExprList assignments, int DelayLB, int DelayUB, boolean local) {
        this.label = Label;
        this.index = index;
        this.preSet = preSet;
        this.postSet = postSet;
        this.enablingGuard = enablingGuard;
        this.assignments = assignments;
        this.delayLB = DelayLB;
        this.delayUB = DelayUB;
        this.local = local;
        assignedVarSet = new HashSet<VarNode>();

        if (preSet == null || postSet == null || enablingGuard == null || assignments == null) {
            new NullPointerException().printStackTrace();
        }
    }
    
    public void initialize(final LPN lpnModel) {
    	// Computer the variables on the left hand side of the assignments.
    	this.lpn = lpnModel;
    	this.supportSet = new HashSet<String>();
    	this.assignedVarSet = new HashSet<VarNode>();
    	
		HashSet<VarNode> guardVarSet = this.enablingGuard.getVariables();
		for(VarNode var : guardVarSet){
			this.supportSet.add(var.getName());
		}
    	
    	// Determine the visibility of this tran.
    	for (VarExpr assign : this.assignments) {
    		assignedVarSet.add(assign.getVar());
    		
    		HashSet<VarNode> tmp = assign.getExpr().getVariables();
    		for(VarNode var : tmp){
    			this.supportSet.add(var.getName());
    		}
        }	
    }
    
    public HashSet<VarNode> getAssignedVars() {
    	return this.assignedVarSet;
    }
    
    public HashSet<String> getSupportVar() {
    	return this.supportSet;
    }

	/**
	 * Check if firing 'fired_transition' causes a disabling error.
	 * @param current_enabled_transitions
	 * @param next_enabled_transitions
	 * @return
	 */
	public LPNTran disablingError(
			final LinkedList<Pair<LPNTran, ProcState>> current_enabled_transitions,
			final LinkedList<Pair<LPNTran, ProcState>> next_enabled_transitions) {
		if (current_enabled_transitions == null || current_enabled_transitions.size()==0)
			return null;
		
		for(Pair<LPNTran, ProcState> curTran2nextState : current_enabled_transitions) {
			LPNTran curEnabledTran = curTran2nextState.getLeft();
			boolean disabled = true;
			if (next_enabled_transitions != null && next_enabled_transitions.size()!=0) {
				for(Pair<LPNTran, ProcState> nextTran2nextState : next_enabled_transitions) {
					LPNTran nextEnabledTran = nextTran2nextState.getLeft();
					if(curEnabledTran == nextEnabledTran) {
						disabled = false;
						break;
					}
				}
			}

			if (disabled == true) {
				if(this.sharePreSet(curEnabledTran) == false) {
					return curEnabledTran;
				}
			}
		}

		return null;
	}
	
	public LPNTran disablingError1(
			final LinkedList<LPNTran> current_enabled_transitions,
			final LinkedList<LPNTran> next_enabled_transitions) {
		if (current_enabled_transitions == null || current_enabled_transitions.size()==0)
			return null;
		
		for(LPNTran curTran : current_enabled_transitions) {
			boolean disabled = true;
			if (next_enabled_transitions != null && next_enabled_transitions.size()!=0) {
				for(LPNTran nextTran : next_enabled_transitions) {
					if(curTran == nextTran) {
						disabled = false;
						break;
					}
				}
			}

			if (disabled == true) {
				if(this.sharePreSet(curTran) == false)
					return curTran;
			}
		}

		return null;
	}

    
//	static public LPNTran disablingError(final LinkedList<LPNTran> current_enabled_transitions, final LinkedList<LPNTran> next_enabled_transitions, LPNTran ths) {
//		return ths.disablingError(current_enabled_transitions, next_enabled_transitions);
//	}
   
   static public LPNTran disablingError(final LPNTran[] current_enabled_transitions, final LPNTran[] next_enabled_transitions,LPNTran ths) {
        //  current_enabled_transitions.remove(fired_transition);
        // return current_enabled_transitions.containsAll(next_enabled_transitions);

        if (current_enabled_transitions == null) {
            return null;
        }

        for (LPNTran cet:current_enabled_transitions) {
            if(cet == ths)
            	continue;

            boolean disabled = true;
            if(next_enabled_transitions != null) {
            	for (LPNTran net:next_enabled_transitions) {
            		if (cet.label == net.label) {
            			disabled = false;
            			break;
            		}
            	}
            }

            if (disabled == true) 
                if (ths.sharePreSet(cet)==false)
                    return cet;
        }

        return null;
    }
    
    final public boolean isEnabled(final State curState, boolean marked) {
        if (curState == null) {
            throw new NullPointerException();
        }
        
		if (this.preSet != null && this.preSet.length > 0) {
			for (int pp : this.preSet) {
				int[] curMarking = curState.getMarking();
				boolean included = false;
				
				for (int i = 0; i < curMarking.length; i++) {
					if (curMarking[i] == pp) {
						included = true;
						break;
					}
				}
				
				if (included == false) {
					marked = false;
					return false;
				}
            }
		}
        
        int[] curVector = curState.getVector();
        if (curVector.length > 0) {
        	int value = this.enablingGuard.evaluate(curVector);
        	
            if(value == 0){
            	this.enablingGuard.resetErrorCode();
            	marked = true;
                return false;
            }
        }

        return true;
    }
    
    final public boolean isEnabled(final State curState) {
        if (curState == null) {
            throw new NullPointerException();
        }
        
		if (this.preSet != null && this.preSet.length > 0) {
			for (int pp : this.preSet) {
				int[] curMarking = curState.getMarking();
				boolean included = false;
				
				for (int i = 0; i < curMarking.length; i++) {
					if (curMarking[i] == pp) {
						included = true;
						break;
					}
				}
				
				if (included == false) {
					return false;
				}
            }
		}
        
        int[] curVector = curState.getVector();
        if (curVector.length > 0) {
        	int value = this.enablingGuard.evaluate(curVector);
        	
            if(value == 0){
            	this.enablingGuard.resetErrorCode();
                return false;
            }
        }

        return true;
    }
    
    final public boolean checkGuard(final State curState) {
        if (curState == null) {
            throw new NullPointerException();
        }
        
        int[] curVector = curState.getVector();
        if (curVector.length > 0) {
        	int value = this.enablingGuard.evaluate(curVector);
        	
            if(value == 0){
            	this.enablingGuard.resetErrorCode();
                return false;
            }
        }

        return true;
    }
    
    
    /**
     * Check if this LPN transition satisfies the timing constraint: its lower bound of delay
     * is larger than the maximal value of its timed in curZone.
     * @param curState - LPN State
     * @param curZone - LPN Zone
     * @return TRUE if satisfied, otherwise FALSE
     */
//    public boolean isTimedEnabled(final State curState, final Zone curZone) {
//    	if(this.isEnabled(curState) == false)
//    		return false;
//    	
//        if (this.delayLB == 0)
//            return true;
//       
//        // Checking timing against the zone
////        Integer timerMaxVal = 0;//curZone.get(0, this.getID());
////        return timerMaxVal == null ? true : this.delayLB <= timerMaxVal;
//        return false;
//    }

    public boolean containsAll(Integer[] set1, int[] set2) {
        int curMarkingSize = set1.length;
        for (int prep : set2) {
            boolean existed = false;
            for (int index = 0; index < curMarkingSize; index++) {
                if (set1[index] == prep) {
                    existed = true;
                    break;
                }
            }
            if (existed == false) {
                return false;
            }
        }
        return true;
    }
 
    static final public boolean notContainsAll(final int[] set1,final int[] set2) {
     //return false if set2 is a subset of set1
     int index;
         for (int i = 0; i < set2.length; i++) {
            for ( index = 0; index < set1.length; index++) {
                if (set1[index] == set2[i]) {
                    break;
                }
            }
            if (index >= set1.length) {
                return true;
            }
        }
        return false;
    }
    
    static final public boolean containsAll(int[] set1, int[] set2) {
      int index;  for (int i = 0; i < set2.length; i++) {
            boolean exists = false;
            for ( index = 0; index < set1.length; index++) {
                if (set1[index] == set2[i]) {
                    exists = true;
                    break;
                }
            }
            if (exists == false) {
                return false;
            }
        }
        return true;
    }



    final public boolean sharePreSet(final LPNTran other) {
        for (int i : preSet) {
            for (int j : other.preSet) {
                if (i == j) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    @Override
    final public String toString() {
//    	String ret = lpn.getLabel() + ": transition: " + getLabel() + ": \n" 
//    				+ "preset: [\n";
//    	
//        for(int i = 0; i < preSet.length; i++)
//        	ret += preSet[i]+ ",";
//        ret += "]\n" 
//        	+ "postset: [";
//        
//        for(int i = 0; i < postSet.length; i++)
//        	ret += postSet[i]+ ",";
//        ret += "]\n";
//       
//        return ret;
    	
    	return this.getFullLabel();
    }
    
    public LPNTran copy(HashMap<String, VarNode> variables){
    	LPNTran newLpnTran = new LPNTran(this.label, this.index, this.preSet, this.postSet, this.enablingGuard.copy(variables), 
    			this.assignments.copy(variables), this.delayLB, this.delayUB, this.local);
    	
    	List<Expression> newAssertionList = new ArrayList<Expression>(this.assertions.size());
    	for(Expression e : this.assertions){
    		newAssertionList.add(e.copy(variables));
    	}
    	
    	newLpnTran.addAllAssertions(newAssertionList);
    	return newLpnTran;
    }

 
    public void setLabel(String lbl) {
    	this.label = lbl;
    }
    
    public String getLabel() {
        return this.label;
    }

    public String getFullLabel() {
    	if(this.lpn != null)
    		return this.lpn.getLabel() + ":" + this.label;
    	
    	return this.label;
    }

    /**
     * @return LPN transition's preset
     */
    public int[] getPreSet() {
        return this.preSet;
    }

    @Override
	public int hashCode() {
    	if(this.hashVal == -1){
    		this.hashVal = this.getFullLabel().hashCode();
    	}
    	
    	return this.hashVal;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		
		if (obj == null)
			return false;
		
		if (getClass() != obj.getClass())
			return false;
		
		LPNTran other = (LPNTran) obj;
		if(this.lpn != other.lpn)
			return false;
		
		if (this.label != other.label)
			return false;
		
		return true;
	}

	/**
     * @param preSet - Integer collection to set as transition's preset
     */
    public void setPreSet(Collection<Integer> PreSet) {
        this.preSet = toArray(PreSet);
    }

    /**
     * @return LPN transition's postset
     */
    public HashSet<Integer> getPostSet() {
       	HashSet<Integer> ret = new HashSet<Integer>();
       	for(int i : this.postSet)
       		ret.add(i);
       	return ret;
    }

    /**
     * @param postSet the PostSet to set
     */
    public void setPostSet(Collection<Integer> PostSet) {
        this.postSet = toArray(PostSet);
    }

    /**
     * @return the EnablingGuard
     */
    public Expression getEnablingGuard() {
        return enablingGuard;
    }

    /**
     * @param enablingGuard the EnablingGuard to set
     */
    public void setEnablingGuard(Expression EnablingGuard) {
        this.enablingGuard = EnablingGuard;
    }

    /**
     * @param assignments the Assignments to set
     */
    public void setAssignments(VarExprList Assignments) {
        this.assignments = Assignments;
    }

    /**
     * @return the DelayLB
     */
    public int getDelayLB() {
        return delayLB;
    }

    /**
     * @param DelayLB the DelayLB to set
     */
    public void setDelayLB(int DelayLB) {
        this.delayLB = DelayLB;
    }

    /**
     * @return the DelayUB
     */
    public int getDelayUB() {
        return delayUB;
    }

    /**
     * @param DelayUB the DelayUB to set
     */
    public void setDelayUB(int DelayUB) {
        this.delayUB = DelayUB;
    }

    public String digest() {
        String s = "+T." + getLabel();
        return s;
    }
    
    /**
     * Fire a transition on a state array, find new local states, and return the new state array formed by the new local states.
     * @param curLpnArray
     * @param curStateArray
     * @param curLpnIndex
     * @return
     */
    public State[] fire(final StateGraph[] curSgArray, final int[] curStateIdxArray) {
    	State[] stateArray = new State[curSgArray.length];
    	for(int i = 0; i < curSgArray.length; i++)
    		stateArray[i] = curSgArray[i].getState(curStateIdxArray[i]);

    	return this.fire(curSgArray, stateArray);
    }

    public State[] fire(final StateGraph[] curSgArray, final State[] curStateArray) {
    	int thisLpnIndex = this.getLpn().getIndex(); 
    	State[] nextStateArray = curStateArray.clone();
    	
    	State curState = curStateArray[thisLpnIndex];
    	State nextState = this.fire(curSgArray[thisLpnIndex], curState);   
    	
    	/* Return curStateArray if firing this transition does not lead to a different module state */
    	if(nextState == curState)
    		return curStateArray;
    	
    	int[] nextVector = nextState.getVector();
    	int[] curVector = curState.getVector();
    	

    	if(Options.checkAssertionError()){
	        for(Expression e : assertions){
	        	if(e.evaluate(nextVector) == 0){
	        		System.err.println("Assertion " + e.toString() + " failed in LPN transition " + this.lpn.getLabel() + ":" + this.label);
	        		System.exit(1);
				}
			}
    	}


        if(this.local()==true) {
    		nextStateArray[thisLpnIndex] = curSgArray[thisLpnIndex].addState(nextState);
        	return nextStateArray;
		}

        
        HashMap<String, Integer> vvSet = new HashMap<String, Integer>();
        for (VarExpr s : this.getAssignments()) {
        	int i = s.getVar().getIndex(curVector);
            int newValue = nextVector[i];
            vvSet.put(this.lpn.getVarIndexMap().getKey(i), newValue);
            //VarNode n = s.getVar();
            //System.out.println(this.lpn.getVarIndexMap().getKey(i) + " = " + newValue);
        }
        
        
        /* Update other module states with the new values generated for the shared variables. */
		nextStateArray[this.lpn.getIndex()] = nextState;
        for(LPN curLpn : this.dstLpnList) {
        	int curIdx = curLpn.getIndex();
    		State newState = curSgArray[curIdx].getNextState(curStateArray[curIdx], curStateArray[thisLpnIndex], this);
    		if(newState != null) 
        		nextStateArray[curIdx] = newState;
        	else {
        		State newOther = curStateArray[curIdx].update(vvSet, curSgArray[curIdx].getLpn().getVarIndexMap());
        		if (newOther == null)
        			nextStateArray[curIdx] = curStateArray[curIdx];
        		else {
        			State cachedOther = curSgArray[curIdx].addState(newOther);
					//nextStateArray[curIdx] = newOther;
            		nextStateArray[curIdx] = cachedOther;
        		}
        	}
        }
        
        return nextStateArray;
    }
    
    /**
     * This function executes the transition, and updates the marking and state vector of the local LPN module.
     * 
     * @param thisSg
     * @param curState
     * @return
     */
    public State fire(final StateGraph thisSg, final State curState) {  		    	
    	/* If no cached next state exists, do regular firing. */
    	// Marking update
        int[] curOldMarking = curState.getMarking();
        int[] curNewMarking = null;
        if(preSet.length==0 && postSet.length==0)
        	curNewMarking = curOldMarking;
		else {
			curNewMarking = new int[curOldMarking.length - preSet.length + postSet.length];
			int index = 0;
			for (int i : curOldMarking) {
				boolean existed = false;
				for (int prep : preSet) {
					if (i == prep) {
						existed = true;
						break;
					}
				}
				if (existed == false) {
					curNewMarking[index] = i;
					index++;
				}
			}
			for (int postp : postSet) {
				curNewMarking[index] = postp;
				index++;
			}
        }

        
        /* State vector update */
        int[] newVectorArray = curState.getVector().clone();
        int[] curVector = curState.getVector();
        
        for (VarExpr s : getAssignments()) {
            int newValue = s.getExpr().evaluate(curVector);
            
            newVectorArray[s.getVar().getIndex(curVector)] = newValue;
        }
        State newState = thisSg.addState(new State(this.lpn, curNewMarking, newVectorArray));
        
        /*
        if(newState == curState) {
    		System.out.println("exit");
        	System.exit(0);
        }
        */
        
        if(Options.checkAssertionError()){
	        int[] newVector = newState.getVector();
			for(Expression e : assertions){
				int value = e.evaluate(newVector);
				
	        	if(value == 0){
	        		System.err.println("Assertion " + e.toString() + " failed in LPN transition " + this.lpn.getLabel() + ":" + this.label);
	        		System.exit(1);
	        	}        	
	        }
        }
				
		return newState;
    }
    

    /*
     * Returns a pair of global state vector index and a local state.
     */
    public ProcState fire(
    		int gVecIdx,
    		final State curState, 
    		final StateGraph thisSg, 
    		final BinaryTree gVecTable,
    		DualHashMap<String, Integer> gVarIndexMap) {  	
    	
    	int[] gVec = gVecTable.toIntArray(gVecIdx);
    
    	return fire(gVec, curState, thisSg, gVecTable, gVarIndexMap);
    }
    	
    public ProcState fire(
        		int[] gVec,
        		final State curState, 
        		final StateGraph thisSg, 
        		final BinaryTree gVecTable,
        		DualHashMap<String, Integer> gVarIndexMap) {
    	
    	ProcState nextState = null;
    	HashMap<String,Integer> gVecMap = new HashMap<String,Integer>();
    	
    	/* If no cached next state exists, do regular firing. */
    	// Marking update
        int[] curOldMarking = curState.getMarking();
        int[] curNewMarking = null;
        if(preSet.length==0 && postSet.length==0)
        	curNewMarking = curOldMarking;
		else {
			curNewMarking = new int[curOldMarking.length - preSet.length + postSet.length];
	//		System.out.println("new makring size " + curNewMarking.length);

			int index = 0;
			for (int i : curOldMarking) {
				boolean existed = false;
				for (int prep : preSet) {
		//			System.out.println("marking update: " + i + "  " + prep);
					if (i == prep) {
						existed = true;
						break;
					}
				}
				if (existed == false) {
					curNewMarking[index] = i;
					index++;
				}
			}
			for (int postp : postSet) {
				curNewMarking[index] = postp;
				index++;
			}
        }

        
        /* State vector update */
        int[] curVector = curState.getVector();
        int[] curVecCopy = Arrays.copyOf(curVector, curVector.length);
        DualHashMap<String,Integer> VarIdxMap = this.lpn.getVarIndexMap();
        VarSet globals = this.lpn.getGlobals();

		for (String var : globals) {
			int idx = VarIdxMap.getValue(var);
			curVecCopy[idx] = gVec[gVarIndexMap.getValue(var)];
		}
		
        if(Options.checkAssertionError() && this.assertions.size() > 0) {	
			for(Expression e : assertions){
		        int value = e.evaluate(curVecCopy);
	        	if(value == 0){
	        		System.err.println("Assertion " + e.toString() + " failed in LPN transition " + this.lpn.getLabel() + ":" + this.label);
	        		System.exit(1);
	        	}        	
	        }
        }
        
		int[] newVector = curState.getVector().clone();

		for (VarExpr s : getAssignments()) {
			int newValue = s.getExpr().evaluate(curVecCopy);
			String var = s.getVar().getSignature(curVecCopy);
			int thisVarIdx = this.getLpn().getVarIndexMap().getValue(var);
			if (this.lpn.getInternals().contains(var) == true) {
				newVector[thisVarIdx] = newValue;
			} 
			else {
				gVecMap.put(var, newValue);
			}
		}
		
		/* If any global variables change, create a new global vector, add it into gVecTable, and find its corresponding index. */
		int[] nextGloVec = gVec;
		if(gVecMap.size() != 0) {
			nextGloVec = Arrays.copyOf(gVec, gVec.length);
			Set<String> vars = gVecMap.keySet();
			for(String var : vars) 
				nextGloVec[gVarIndexMap.getValue(var)] = gVecMap.get(var);
		}
		int nextGloVecIdx = gVecTable.add(nextGloVec);

		/* find the cached copy of the new local state if there is any. */
        State cachedLocalState = thisSg.addState(new State(this.lpn, curNewMarking, newVector));
        nextState = new ProcState(nextGloVecIdx, cachedLocalState); 

		return nextState;
    }
    
    public Pair<State, HashMap<String,Integer>> fire(
    		final StateGraph thisSg, 
    		final State curState, 
    		int[] gVec, 
    		int gVecIdx,
    		DualHashMap<String, Integer> gVarIndexMap) {  	
    	
    	HashMap<String,Integer> gVecMap = new HashMap<String,Integer>();    
    	
    	/* If no cached next state exists, do regular firing. */
    	// Marking update
        int[] curOldMarking = curState.getMarking();
        int[] curNewMarking = null;
        if(preSet.length==0 && postSet.length==0)
        	curNewMarking = curOldMarking;
		else {
			curNewMarking = new int[curOldMarking.length - preSet.length + postSet.length];
	//		System.out.println("new makring size " + curNewMarking.length);

			int index = 0;
			for (int i : curOldMarking) {
				boolean existed = false;
				for (int prep : preSet) {
		//			System.out.println("marking update: " + i + "  " + prep);
					if (i == prep) {
						existed = true;
						break;
					}
				}
				if (existed == false) {
					curNewMarking[index] = i;
					index++;
				}
			}
			for (int postp : postSet) {
				curNewMarking[index] = postp;
				index++;
			}
        }

        
        /* State vector update */
        int[] curVector = curState.getVector();
        int[] curVecCopy = Arrays.copyOf(curVector, curVector.length);
        DualHashMap<String,Integer> VarIdxMap = this.lpn.getVarIndexMap();
        VarSet globals = this.lpn.getGlobals();

		for (String var : globals) {
			int idx = VarIdxMap.getValue(var);
			curVecCopy[idx] = gVec[gVarIndexMap.getValue(var)];
		}
		
        if(Options.checkAssertionError() && this.assertions.size() > 0) {	
			for(Expression e : assertions){
		        int value = e.evaluate(curVecCopy);
	        	if(value == 0){
	        		System.err.println("Assertion " + e.toString() + " failed in LPN transition " + this.lpn.getLabel() + ":" + this.label);
	        		System.exit(1);
	        	}        	
	        }
        }
        
		int[] newVector = curState.getVector().clone();

		for (VarExpr s : getAssignments()) {
			int newValue = s.getExpr().evaluate(curVecCopy);
			String var = s.getVar().getSignature(curVecCopy);
			int thisVarIdx = this.getLpn().getVarIndexMap().getValue(var);
			if (this.lpn.getInternals().contains(var) == true) {
				newVector[thisVarIdx] = newValue;
			} 
			else {
				gVecMap.put(var, newValue);
			}
		}

        State cachedLocalState = thisSg.addState(new State(this.lpn, curNewMarking, newVector));

        Pair<State, HashMap<String,Integer>> nextState = new Pair<State, HashMap<String,Integer>>(cachedLocalState, gVecMap); 
                
		return nextState;
    }

    
    public Set<LPN> getDstLpnList(){
    	return this.dstLpnList;
    }
    
    public void addDstLpn(LPN lpn){
    	this.dstLpnList.add(lpn);
    }
    
    public State constrFire(final State curState) {
    	// Marking update
        int[] curOldMarking = curState.getMarking();
        int[] curNewMarking = null;
        if(this.preSet.length==0 && this.postSet.length==0){
        	curNewMarking = curOldMarking;
        }
		else {
			curNewMarking = new int[curOldMarking.length - this.preSet.length + this.postSet.length];
			int index = 0;			
			for (int i : curOldMarking) {
				boolean existed = false;
				for (int prep : this.preSet) {
					if (i == prep) {
						existed = true;
						break;
					}
					else if(prep > i){
						break;
					}
				}
				
				if (existed == false) {
					curNewMarking[index] = i;
					index++;
				}
			}
			
			for (int postp : postSet) {
				curNewMarking[index] = postp;
				index++;
			}
        }

        // state error code
        StateError stateErrorCode = StateError.NONE;
        
        // check if the guard contains an expression error
        if(this.enablingGuard.getErrorCode() != ExpressionError.NONE){
        	if(Options.getVerbosity() > 20){
        		System.err.println("Guard expression error " + this.enablingGuard.getErrorCode() + " in LPNTran " + this.getFullLabel());
        	}
        	
        	stateErrorCode = StateError.EXPRESSION;
        	this.enablingGuard.resetErrorCode();
        }
        
        //  State vector update
        int[] oldVector = curState.getVector();
        int size = oldVector.length;
        int[] newVectorArray = new int[size];
        System.arraycopy(oldVector, 0, newVectorArray, 0, size);
        
        int[] curVector = curState.getVector();
        for (VarExpr s : getAssignments()) {
        	Expression expr = s.getExpr();
            int newValue = (int) expr.evaluate(curVector);
            if(expr.getErrorCode() != ExpressionError.NONE){
            	if(Options.getVerbosity() > 20){
            		System.err.println("Assignment expression error " + this.enablingGuard.getErrorCode() + " in LPNTran " + this.getFullLabel());
            	}
            	
            	stateErrorCode = StateError.EXPRESSION;
            	expr.resetErrorCode();
            }
            
            newVectorArray[s.getVar().getIndex(curVector)] = newValue;
        }
        
        State newState = new State(this.lpn, curNewMarking, newVectorArray);
        
        if(Options.checkAssertionError()){
	        int[] newVector = newState.getVector();
			for(Expression e : assertions){
				int val = e.evaluate(newVector);
				if(e.getErrorCode() != ExpressionError.NONE){
					stateErrorCode = StateError.EXPRESSION;
					e.resetErrorCode();
				}
				
	        	if(val == 0){
	        		if(Options.getVerbosity() > 20){
	        			System.err.println("Assertion " + e.toString() + " failed in LPN transition " + this.lpn.getLabel() + ":" + this.label);
	        		}
	        		
	        		return this.lpn.getStateGraph().assertionErrorState;
	        	}
	        }
        }
        
        if(stateErrorCode != StateError.NONE){
        	return this.lpn.getStateGraph().expressionErrorState;
        }
		
		return newState;
    }
    
    /**
     * Check if enabling of 'other' depends on 'this'.
     * @param other
     * @return boolean
     */
    public boolean dependent(LPNTran other) {
        // Check if 'this' and 'other' have common places in their presets
        // Check if the preset of 'other' includes places in the postset of 'this'.
        // Check if the Boolean guard of 'other' depends on the variables defined by 'this'.
        // If one of the three checks is true, return true; otherwise, return false.
    	HashSet<String> thisVarSet = new HashSet<String>();
        for (VarExpr assgn : this.assignments) {
            thisVarSet.add(assgn.getVar().getName());
        }
                
        //set of variables that the Boolean guard of 'other' depends on.
        for (VarNode otherVar : other.getEnablingGuard().getVariables()) {
            //System.out.println(otherVar);
            if (thisVarSet.contains(otherVar.getName())) {
                return true;
            }
        }
    	
        // if this and other transitions are in different LPNs, they are independent.
        if(this.lpn.getLabel() != other.lpn.getLabel())
        	return false;
        	
    	for (int i : other.preSet) {
            for (int j : this.preSet) {
                if (i == j) {
                    return true;
                }
            }
            for (int j : this.postSet) {
                if (i == j) {
                    return true;
                }
            }
        }
        
        

        return false;
    }

    /**
     * @return LPN object containing this LPN transition.
     */
    public LPN getLpn() {
        return lpn;
    }

    /**
     * @param lpn - Associated LPN containing this LPN transition.
     */
    public void setLpn(LPN lpn) {
        this.lpn = lpn;
    }

//    static public void printUsageStats() {
//        System.out.printf("%-20s %11s\n", "LPNTran", counts[0]);
////         System.out.printf("\t%-20s %11s\n",   "clone",  counts[1]);
//        System.out.printf("\t%-20s %11s\n", "getEnabledLpnTrans", counts[2]);
////         System.out.printf("\t%-20s %11s\n",   "getMarkedLpnTrans",  counts[3]);
////        System. out.printf("\t%-20s %11s\n",   "equals",  counts[4]);
//        System.out.printf("\t%-20s %11s\n", "isEnabled", counts[5]);
//        System.out.printf("\t%-20s %11s\n", "isTimeEnabled", counts[6]);
////       System.  out.printf("\t%-20s %11s\n",   "isMarked",  counts[7]);
//        System.out.printf("\t%-20s %11s\n", "fire", counts[8]);
////      System.   out.printf("\t%-20s %11s\n",   "sharePreSet",  counts[9]);
//        System.out.printf("\t%-20s %11s\n", "disablingError", counts[10]);
////       System.  out.println("getEnTrans: "+stats.toString());
//    }

    public void print() {
        System.out.println(lpn.getLabel() + ": transition: " + getLabel() + ": ");

        System.out.print("preset: [");
        for(int i = 0; i < preSet.length; i++)
        	System.out.print(preSet[i]+ ",");
        System.out.println("]");
        
        System.out.print("postset: [");
        for(int i = 0; i < postSet.length; i++)
        	System.out.print(postSet[i]+ ",");
        System.out.println("]");

        //System.out.print("\t Guard: ");
        //enablingGuard.print();
    }
    
    /**
     * @return the assignments
     */
    public VarExprList getAssignments() {
        return assignments;
    }

    
    /**
     * Inserts a Boolean expression into LPNTran's assertion list.
     * @param booleanExpr - Boolean expression
     * @return void
     */
    public void addAssertion(Expression booleanExpr){
    	assertions.add(booleanExpr);
    }
    
    /**
     * Inserts a collection of Boolean expressions into LPNTran's assertion list.
     * @param booleanExprs - collection of Boolean expressions
     * @return void
     */
    public void addAllAssertions(Collection<Expression> booleanExprs){
    	assertions.addAll(booleanExprs);
    }
    
    public List<Expression> getAssertions(){
    	return this.assertions;
    }
    
    /**
     * Returns true if LPNTran only modifies non-output variables.
     * @return Boolean
     */
    public boolean local(){
    	return this.local;
    }
    
    public void setLocalFlag(boolean flag){
    	this.local = flag;
    }
    
    public String getAssignmentString(){
        String ret="";
        for(VarExpr ve:getAssignments()){

            ret+=ve.toString()+"; ";
        }
        return ret;
    }
    
    public String getLabelString(){
    	return lpn.getLabel() + ":" + getLabel();
    }

    public void setIndex(int idx) {
    	this.index = idx;
    }
    
    public int getIndex() {
    	return this.index;
    }
    
    /*
     * Needed in Moore's code. Should be removed later.
     */
    public int getID() {
    	return 0;
    }
    
    public void setSticky(){
    	this.stickyFlag = true;
    }

    public boolean sticky(){
    	return this.stickyFlag;
    }
}
