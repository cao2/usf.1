
// tip = tree identification protocol

// topology definition





byte connected[16] = { 0 ,1 ,0 ,0  ,1 ,0 ,1 ,0  ,0 ,1 ,0 ,1  ,0 ,0 ,1 ,0   }; 









// global definitions

byte toss;



byte elected = 4;
byte elected_num = 0;

// lossy channels????
channel ch_0_0_in, ch_0_0_out;



channel ch_1_0_in, ch_1_0_out;



channel ch_2_0_in, ch_2_0_out;



channel ch_3_0_in, ch_3_0_out;



channel ch_0_1_in, ch_0_1_out;



channel ch_1_1_in, ch_1_1_out;



channel ch_2_1_in, ch_2_1_out;



channel ch_3_1_in, ch_3_1_out;



channel ch_0_2_in, ch_0_2_out;



channel ch_1_2_in, ch_1_2_out;



channel ch_2_2_in, ch_2_2_out;



channel ch_3_2_in, ch_3_2_out;



channel ch_0_3_in, ch_0_3_out;



channel ch_1_3_in, ch_1_3_out;



channel ch_2_3_in, ch_2_3_out;



channel ch_3_3_in, ch_3_3_out;




//forloop(y,0,decr(N), `buffer_channel(ch_`'y,2)')

// process definitions



process Node_0 {
byte received[4];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(0*4+0)] +connected[(0*4+1)] +connected[(0*4+2)] +connected[(0*4+3)] ) == 1 && connected[(0*4+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(0*4+0)] +connected[(0*4+1)] +connected[(0*4+2)] +connected[(0*4+3)] ) == 1 && connected[(0*4+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(0*4+0)] +connected[(0*4+1)] +connected[(0*4+2)] +connected[(0*4+3)] ) == 1 && connected[(0*4+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(0*4+0)] +connected[(0*4+1)] +connected[(0*4+2)] +connected[(0*4+3)] ) == 1 && connected[(0*4+3)];
	effect j = 3; },

 start -> wait_for_request {
	guard (connected[(0*4+0)] +connected[(0*4+1)] +connected[(0*4+2)] +connected[(0*4+3)] ) > 1;
	effect n = (connected[(0*4+0)] +connected[(0*4+1)] +connected[(0*4+2)] +connected[(0*4+3)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 0; sync ch_0_0_out?m; },
 wait_for_request -> wait_q { guard 1 != 0; sync ch_1_0_out?m; },
 wait_for_request -> wait_q { guard 2 != 0; sync ch_2_0_out?m; },
 wait_for_request -> wait_q { guard 3 != 0; sync ch_3_0_out?m; },

 wait_q -> error_st {
	guard m/4 != 1 || (not connected[(0*4+m%4)]) || received[m%4] == 1;
 },
 wait_q -> wait_for_request {
	guard m/4 == 1 && connected[(0*4+m%4)] && received[m%4] == 0;
	effect received[m%4] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<4 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_0_0_in!(2*4+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_0_1_in!(2*4+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_0_2_in!(2*4+0);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_0_3_in!(2*4+0);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 4; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(0*4+0)] && (received[0] == 0);
	sync ch_0_0_in!(1*4+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(0*4+1)] && (received[1] == 0);
	sync ch_0_1_in!(1*4+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(0*4+2)] && (received[2] == 0);
	sync ch_0_2_in!(1*4+0);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(0*4+3)] && (received[3] == 0);
	sync ch_0_3_in!(1*4+0);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 0 and received[0] == 1; sync ch_0_0_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 0 and received[1] == 1; sync ch_1_0_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 0 and received[2] == 1; sync ch_2_0_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 0 and received[3] == 1; sync ch_3_0_out?m; },

 wait_ack_q -> error_st { guard m/4 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/4 == 3; effect received[m%4] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 0, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_0_0_in!(1*4+0);},
found_partner -> response { guard 1 == j; sync ch_0_1_in!(1*4+0);},
found_partner -> response { guard 2 == j; sync ch_0_2_in!(1*4+0);},
found_partner -> response { guard 3 == j; sync ch_0_3_in!(1*4+0);},

 found_partner -> found_q { guard 0 != 0; sync ch_0_0_out?m; },
found_partner -> found_q { guard 1 != 0; sync ch_1_0_out?m; },
found_partner -> found_q { guard 2 != 0; sync ch_2_0_out?m; },
found_partner -> found_q { guard 3 != 0; sync ch_3_0_out?m; },

 found_q -> child_handshake { guard m/4 == 1; effect received[m%4] = 1, n = 1;},
 found_q -> error_st { guard m/4 != 1; },

 // response
  response -> response_q { guard 0 != 0; sync ch_0_0_out?m; },
 response -> response_q { guard 1 != 0; sync ch_1_0_out?m; },
 response -> response_q { guard 2 != 0; sync ch_2_0_out?m; },
 response -> response_q { guard 3 != 0; sync ch_3_0_out?m; },

 response_q -> become_child { guard m/4 == 2; },
  become_child -> finish {
	guard 0 == m%4;
	sync ch_0_0_in!(3*4+0); },
 become_child -> finish {
	guard 1 == m%4;
	sync ch_0_1_in!(3*4+0); },
 become_child -> finish {
	guard 2 == m%4;
	sync ch_0_2_in!(3*4+0); },
 become_child -> finish {
	guard 3 == m%4;
	sync ch_0_3_in!(3*4+0); },

 response_q -> contention { guard m/4 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%4; sync ch_0_0_in!(1*4+0); },
 winner -> response { guard 1 == m%4; sync ch_0_1_in!(1*4+0); },
 winner -> response { guard 2 == m%4; sync ch_0_2_in!(1*4+0); },
 winner -> response { guard 3 == m%4; sync ch_0_3_in!(1*4+0); },

 loser -> loser_q { guard 0 != 0; sync ch_0_0_out?m; },
loser -> loser_q { guard 1 != 0; sync ch_1_0_out?m; },
loser -> loser_q { guard 2 != 0; sync ch_2_0_out?m; },
loser -> loser_q { guard 3 != 0; sync ch_3_0_out?m; },

 loser_q -> child_handshake { guard m/4 == 1; effect received[m%4] = 1, n = 1; };

}
process Node_1 {
byte received[4];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(1*4+0)] +connected[(1*4+1)] +connected[(1*4+2)] +connected[(1*4+3)] ) == 1 && connected[(1*4+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(1*4+0)] +connected[(1*4+1)] +connected[(1*4+2)] +connected[(1*4+3)] ) == 1 && connected[(1*4+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(1*4+0)] +connected[(1*4+1)] +connected[(1*4+2)] +connected[(1*4+3)] ) == 1 && connected[(1*4+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(1*4+0)] +connected[(1*4+1)] +connected[(1*4+2)] +connected[(1*4+3)] ) == 1 && connected[(1*4+3)];
	effect j = 3; },

 start -> wait_for_request {
	guard (connected[(1*4+0)] +connected[(1*4+1)] +connected[(1*4+2)] +connected[(1*4+3)] ) > 1;
	effect n = (connected[(1*4+0)] +connected[(1*4+1)] +connected[(1*4+2)] +connected[(1*4+3)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 1; sync ch_0_1_out?m; },
 wait_for_request -> wait_q { guard 1 != 1; sync ch_1_1_out?m; },
 wait_for_request -> wait_q { guard 2 != 1; sync ch_2_1_out?m; },
 wait_for_request -> wait_q { guard 3 != 1; sync ch_3_1_out?m; },

 wait_q -> error_st {
	guard m/4 != 1 || (not connected[(1*4+m%4)]) || received[m%4] == 1;
 },
 wait_q -> wait_for_request {
	guard m/4 == 1 && connected[(1*4+m%4)] && received[m%4] == 0;
	effect received[m%4] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<4 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_1_0_in!(2*4+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_1_1_in!(2*4+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_1_2_in!(2*4+1);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_1_3_in!(2*4+1);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 4; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(1*4+0)] && (received[0] == 0);
	sync ch_1_0_in!(1*4+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(1*4+1)] && (received[1] == 0);
	sync ch_1_1_in!(1*4+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(1*4+2)] && (received[2] == 0);
	sync ch_1_2_in!(1*4+1);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(1*4+3)] && (received[3] == 0);
	sync ch_1_3_in!(1*4+1);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 1 and received[0] == 1; sync ch_0_1_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 1 and received[1] == 1; sync ch_1_1_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 1 and received[2] == 1; sync ch_2_1_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 1 and received[3] == 1; sync ch_3_1_out?m; },

 wait_ack_q -> error_st { guard m/4 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/4 == 3; effect received[m%4] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 1, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_1_0_in!(1*4+1);},
found_partner -> response { guard 1 == j; sync ch_1_1_in!(1*4+1);},
found_partner -> response { guard 2 == j; sync ch_1_2_in!(1*4+1);},
found_partner -> response { guard 3 == j; sync ch_1_3_in!(1*4+1);},

 found_partner -> found_q { guard 0 != 1; sync ch_0_1_out?m; },
found_partner -> found_q { guard 1 != 1; sync ch_1_1_out?m; },
found_partner -> found_q { guard 2 != 1; sync ch_2_1_out?m; },
found_partner -> found_q { guard 3 != 1; sync ch_3_1_out?m; },

 found_q -> child_handshake { guard m/4 == 1; effect received[m%4] = 1, n = 1;},
 found_q -> error_st { guard m/4 != 1; },

 // response
  response -> response_q { guard 0 != 1; sync ch_0_1_out?m; },
 response -> response_q { guard 1 != 1; sync ch_1_1_out?m; },
 response -> response_q { guard 2 != 1; sync ch_2_1_out?m; },
 response -> response_q { guard 3 != 1; sync ch_3_1_out?m; },

 response_q -> become_child { guard m/4 == 2; },
  become_child -> finish {
	guard 0 == m%4;
	sync ch_1_0_in!(3*4+1); },
 become_child -> finish {
	guard 1 == m%4;
	sync ch_1_1_in!(3*4+1); },
 become_child -> finish {
	guard 2 == m%4;
	sync ch_1_2_in!(3*4+1); },
 become_child -> finish {
	guard 3 == m%4;
	sync ch_1_3_in!(3*4+1); },

 response_q -> contention { guard m/4 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%4; sync ch_1_0_in!(1*4+1); },
 winner -> response { guard 1 == m%4; sync ch_1_1_in!(1*4+1); },
 winner -> response { guard 2 == m%4; sync ch_1_2_in!(1*4+1); },
 winner -> response { guard 3 == m%4; sync ch_1_3_in!(1*4+1); },

 loser -> loser_q { guard 0 != 1; sync ch_0_1_out?m; },
loser -> loser_q { guard 1 != 1; sync ch_1_1_out?m; },
loser -> loser_q { guard 2 != 1; sync ch_2_1_out?m; },
loser -> loser_q { guard 3 != 1; sync ch_3_1_out?m; },

 loser_q -> child_handshake { guard m/4 == 1; effect received[m%4] = 1, n = 1; };

}
process Node_2 {
byte received[4];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(2*4+0)] +connected[(2*4+1)] +connected[(2*4+2)] +connected[(2*4+3)] ) == 1 && connected[(2*4+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(2*4+0)] +connected[(2*4+1)] +connected[(2*4+2)] +connected[(2*4+3)] ) == 1 && connected[(2*4+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(2*4+0)] +connected[(2*4+1)] +connected[(2*4+2)] +connected[(2*4+3)] ) == 1 && connected[(2*4+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(2*4+0)] +connected[(2*4+1)] +connected[(2*4+2)] +connected[(2*4+3)] ) == 1 && connected[(2*4+3)];
	effect j = 3; },

 start -> wait_for_request {
	guard (connected[(2*4+0)] +connected[(2*4+1)] +connected[(2*4+2)] +connected[(2*4+3)] ) > 1;
	effect n = (connected[(2*4+0)] +connected[(2*4+1)] +connected[(2*4+2)] +connected[(2*4+3)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 2; sync ch_0_2_out?m; },
 wait_for_request -> wait_q { guard 1 != 2; sync ch_1_2_out?m; },
 wait_for_request -> wait_q { guard 2 != 2; sync ch_2_2_out?m; },
 wait_for_request -> wait_q { guard 3 != 2; sync ch_3_2_out?m; },

 wait_q -> error_st {
	guard m/4 != 1 || (not connected[(2*4+m%4)]) || received[m%4] == 1;
 },
 wait_q -> wait_for_request {
	guard m/4 == 1 && connected[(2*4+m%4)] && received[m%4] == 0;
	effect received[m%4] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<4 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_2_0_in!(2*4+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_2_1_in!(2*4+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_2_2_in!(2*4+2);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_2_3_in!(2*4+2);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 4; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(2*4+0)] && (received[0] == 0);
	sync ch_2_0_in!(1*4+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(2*4+1)] && (received[1] == 0);
	sync ch_2_1_in!(1*4+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(2*4+2)] && (received[2] == 0);
	sync ch_2_2_in!(1*4+2);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(2*4+3)] && (received[3] == 0);
	sync ch_2_3_in!(1*4+2);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 2 and received[0] == 1; sync ch_0_2_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 2 and received[1] == 1; sync ch_1_2_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 2 and received[2] == 1; sync ch_2_2_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 2 and received[3] == 1; sync ch_3_2_out?m; },

 wait_ack_q -> error_st { guard m/4 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/4 == 3; effect received[m%4] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 2, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_2_0_in!(1*4+2);},
found_partner -> response { guard 1 == j; sync ch_2_1_in!(1*4+2);},
found_partner -> response { guard 2 == j; sync ch_2_2_in!(1*4+2);},
found_partner -> response { guard 3 == j; sync ch_2_3_in!(1*4+2);},

 found_partner -> found_q { guard 0 != 2; sync ch_0_2_out?m; },
found_partner -> found_q { guard 1 != 2; sync ch_1_2_out?m; },
found_partner -> found_q { guard 2 != 2; sync ch_2_2_out?m; },
found_partner -> found_q { guard 3 != 2; sync ch_3_2_out?m; },

 found_q -> child_handshake { guard m/4 == 1; effect received[m%4] = 1, n = 1;},
 found_q -> error_st { guard m/4 != 1; },

 // response
  response -> response_q { guard 0 != 2; sync ch_0_2_out?m; },
 response -> response_q { guard 1 != 2; sync ch_1_2_out?m; },
 response -> response_q { guard 2 != 2; sync ch_2_2_out?m; },
 response -> response_q { guard 3 != 2; sync ch_3_2_out?m; },

 response_q -> become_child { guard m/4 == 2; },
  become_child -> finish {
	guard 0 == m%4;
	sync ch_2_0_in!(3*4+2); },
 become_child -> finish {
	guard 1 == m%4;
	sync ch_2_1_in!(3*4+2); },
 become_child -> finish {
	guard 2 == m%4;
	sync ch_2_2_in!(3*4+2); },
 become_child -> finish {
	guard 3 == m%4;
	sync ch_2_3_in!(3*4+2); },

 response_q -> contention { guard m/4 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%4; sync ch_2_0_in!(1*4+2); },
 winner -> response { guard 1 == m%4; sync ch_2_1_in!(1*4+2); },
 winner -> response { guard 2 == m%4; sync ch_2_2_in!(1*4+2); },
 winner -> response { guard 3 == m%4; sync ch_2_3_in!(1*4+2); },

 loser -> loser_q { guard 0 != 2; sync ch_0_2_out?m; },
loser -> loser_q { guard 1 != 2; sync ch_1_2_out?m; },
loser -> loser_q { guard 2 != 2; sync ch_2_2_out?m; },
loser -> loser_q { guard 3 != 2; sync ch_3_2_out?m; },

 loser_q -> child_handshake { guard m/4 == 1; effect received[m%4] = 1, n = 1; };

}
process Node_3 {
byte received[4];
byte j, n, m;
state 	start, wait_for_request, wait_q, child_handshake, wait_for_acks, wait_ack_q,
	become_parent, found_partner, found_q, response, response_q, contention, become_child,
	winner, loser, loser_q, finish, error_st;
init start;
trans
 // start 
 start -> found_partner {
	guard (connected[(3*4+0)] +connected[(3*4+1)] +connected[(3*4+2)] +connected[(3*4+3)] ) == 1 && connected[(3*4+0)];
	effect j = 0; },
start -> found_partner {
	guard (connected[(3*4+0)] +connected[(3*4+1)] +connected[(3*4+2)] +connected[(3*4+3)] ) == 1 && connected[(3*4+1)];
	effect j = 1; },
start -> found_partner {
	guard (connected[(3*4+0)] +connected[(3*4+1)] +connected[(3*4+2)] +connected[(3*4+3)] ) == 1 && connected[(3*4+2)];
	effect j = 2; },
start -> found_partner {
	guard (connected[(3*4+0)] +connected[(3*4+1)] +connected[(3*4+2)] +connected[(3*4+3)] ) == 1 && connected[(3*4+3)];
	effect j = 3; },

 start -> wait_for_request {
	guard (connected[(3*4+0)] +connected[(3*4+1)] +connected[(3*4+2)] +connected[(3*4+3)] ) > 1;
	effect n = (connected[(3*4+0)] +connected[(3*4+1)] +connected[(3*4+2)] +connected[(3*4+3)] );},

 // waiting for by my parent requests
  wait_for_request -> wait_q { guard 0 != 3; sync ch_0_3_out?m; },
 wait_for_request -> wait_q { guard 1 != 3; sync ch_1_3_out?m; },
 wait_for_request -> wait_q { guard 2 != 3; sync ch_2_3_out?m; },
 wait_for_request -> wait_q { guard 3 != 3; sync ch_3_3_out?m; },

 wait_q -> error_st {
	guard m/4 != 1 || (not connected[(3*4+m%4)]) || received[m%4] == 1;
 },
 wait_q -> wait_for_request {
	guard m/4 == 1 && connected[(3*4+m%4)] && received[m%4] == 0;
	effect received[m%4] = 1, n = n-1;
 },
 wait_for_request -> child_handshake { guard n <= 1; effect j = 0; },

 // child handshake
 child_handshake -> child_handshake { guard j<4 && not received[j]; effect j = j+1;},
  child_handshake -> child_handshake {
	guard 0 == j && received[j];
	sync ch_3_0_in!(2*4+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 1 == j && received[j];
	sync ch_3_1_in!(2*4+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 2 == j && received[j];
	sync ch_3_2_in!(2*4+3);
	effect j = j+1;
 },
 child_handshake -> child_handshake {
	guard 3 == j && received[j];
	sync ch_3_3_in!(2*4+3);
	effect j = j+1;
 },

 child_handshake -> wait_for_acks { guard n == 0 && j == 4; },
  child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(3*4+0)] && (received[0] == 0);
	sync ch_3_0_in!(1*4+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(3*4+1)] && (received[1] == 0);
	sync ch_3_1_in!(1*4+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(3*4+2)] && (received[2] == 0);
	sync ch_3_2_in!(1*4+3);},
 child_handshake -> wait_for_acks {
	guard n == 1 && j == 4 && connected[(3*4+3)] && (received[3] == 0);
	sync ch_3_3_in!(1*4+3);},


 // wait for ack; od koho jsem dostal budu resit zpetnym nulovanim received
 wait_for_acks -> wait_ack_q { guard 0 != 3 and received[0] == 1; sync ch_0_3_out?m; },
wait_for_acks -> wait_ack_q { guard 1 != 3 and received[1] == 1; sync ch_1_3_out?m; },
wait_for_acks -> wait_ack_q { guard 2 != 3 and received[2] == 1; sync ch_2_3_out?m; },
wait_for_acks -> wait_ack_q { guard 3 != 3 and received[3] == 1; sync ch_3_3_out?m; },

 wait_ack_q -> error_st { guard m/4 != 3; }, 
 wait_ack_q -> wait_for_acks { guard m/4 == 3; effect received[m%4] = 0; },
 wait_for_acks -> become_parent { guard received[0] +received[1] +received[2] +received[3]  == 0; },
 become_parent -> finish { guard n == 0; effect elected = 3, elected_num = elected_num+1;},
 become_parent -> response { guard n == 1; },

 // only one neigh
 found_partner -> response { guard 0 == j; sync ch_3_0_in!(1*4+3);},
found_partner -> response { guard 1 == j; sync ch_3_1_in!(1*4+3);},
found_partner -> response { guard 2 == j; sync ch_3_2_in!(1*4+3);},
found_partner -> response { guard 3 == j; sync ch_3_3_in!(1*4+3);},

 found_partner -> found_q { guard 0 != 3; sync ch_0_3_out?m; },
found_partner -> found_q { guard 1 != 3; sync ch_1_3_out?m; },
found_partner -> found_q { guard 2 != 3; sync ch_2_3_out?m; },
found_partner -> found_q { guard 3 != 3; sync ch_3_3_out?m; },

 found_q -> child_handshake { guard m/4 == 1; effect received[m%4] = 1, n = 1;},
 found_q -> error_st { guard m/4 != 1; },

 // response
  response -> response_q { guard 0 != 3; sync ch_0_3_out?m; },
 response -> response_q { guard 1 != 3; sync ch_1_3_out?m; },
 response -> response_q { guard 2 != 3; sync ch_2_3_out?m; },
 response -> response_q { guard 3 != 3; sync ch_3_3_out?m; },

 response_q -> become_child { guard m/4 == 2; },
  become_child -> finish {
	guard 0 == m%4;
	sync ch_3_0_in!(3*4+3); },
 become_child -> finish {
	guard 1 == m%4;
	sync ch_3_1_in!(3*4+3); },
 become_child -> finish {
	guard 2 == m%4;
	sync ch_3_2_in!(3*4+3); },
 become_child -> finish {
	guard 3 == m%4;
	sync ch_3_3_in!(3*4+3); },

 response_q -> contention { guard m/4 == 1; },
 // contention
 contention -> winner { guard toss == 0; effect toss = 1;},
 contention -> loser {guard toss == 1; },
  winner -> response { guard 0 == m%4; sync ch_3_0_in!(1*4+3); },
 winner -> response { guard 1 == m%4; sync ch_3_1_in!(1*4+3); },
 winner -> response { guard 2 == m%4; sync ch_3_2_in!(1*4+3); },
 winner -> response { guard 3 == m%4; sync ch_3_3_in!(1*4+3); },

 loser -> loser_q { guard 0 != 3; sync ch_0_3_out?m; },
loser -> loser_q { guard 1 != 3; sync ch_1_3_out?m; },
loser -> loser_q { guard 2 != 3; sync ch_2_3_out?m; },
loser -> loser_q { guard 3 != 3; sync ch_3_3_out?m; },

 loser_q -> child_handshake { guard m/4 == 1; effect received[m%4] = 1, n = 1; };

}



process channel_ch_0_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_0_in?v; },
 tr -> ready { sync ch_0_0_out!v;};
}

process channel_ch_1_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_0_in?v; },
 tr -> ready { sync ch_1_0_out!v;};
}

process channel_ch_2_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_0_in?v; },
 tr -> ready { sync ch_2_0_out!v;};
}

process channel_ch_3_0 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_0_in?v; },
 tr -> ready { sync ch_3_0_out!v;};
}

process channel_ch_0_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_1_in?v; },
 tr -> ready { sync ch_0_1_out!v;};
}

process channel_ch_1_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_1_in?v; },
 tr -> ready { sync ch_1_1_out!v;};
}

process channel_ch_2_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_1_in?v; },
 tr -> ready { sync ch_2_1_out!v;};
}

process channel_ch_3_1 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_1_in?v; },
 tr -> ready { sync ch_3_1_out!v;};
}

process channel_ch_0_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_2_in?v; },
 tr -> ready { sync ch_0_2_out!v;};
}

process channel_ch_1_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_2_in?v; },
 tr -> ready { sync ch_1_2_out!v;};
}

process channel_ch_2_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_2_in?v; },
 tr -> ready { sync ch_2_2_out!v;};
}

process channel_ch_3_2 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_2_in?v; },
 tr -> ready { sync ch_3_2_out!v;};
}

process channel_ch_0_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_0_3_in?v; },
 tr -> ready { sync ch_0_3_out!v;};
}

process channel_ch_1_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_1_3_in?v; },
 tr -> ready { sync ch_1_3_out!v;};
}

process channel_ch_2_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_2_3_in?v; },
 tr -> ready { sync ch_2_3_out!v;};
}

process channel_ch_3_3 {
byte v;
state ready,tr;
init ready;
trans
 ready -> tr { sync ch_3_3_in?v; },
 tr -> ready { sync ch_3_3_out!v;};
}
system async;
