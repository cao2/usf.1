
default(N,2)
default(ERROR,0)

define(TR,10)
define(triple,`(($1)+($2)*TR+($3*TR*TR))')
define(first, `(($1)%TR)')
define(second, `((($1)%(TR*TR))/TR)')
define(third, `(($1)/(TR*TR))')
define(ENQ,0)

channel to_medium;
forloop(x,0,N, `channel from_medium`'x, in`'x, out`'x;
')


process Medium {
int m;
byte i;
state wait, got, broadcast, collision;
init wait;
trans
 wait -> wait { sync to_medium?m; }, // loss incoming message
 wait -> got { sync to_medium?m;},

 got -> collision { sync to_medium?m; },
 got -> broadcast { effect i=0; },
 broadcast -> broadcast { guard i == first(m); effect i = i+1;},
 broadcast -> broadcast { guard i != first(m) && i <= N; effect i = i+1; }, // loss of outgoing msg
forloop(x,0,N, ` broadcast -> broadcast { guard x != first(m) && x==i; sync from_medium`'x`'!m; effect i = i+1; },
')
 broadcast -> wait { guard i == N+1 ; }; 
}

define(slave, `process Slave$1 {
int m;
state wait, got, enquire;
init wait;
trans
 wait -> got { sync from_medium$1?m; },
 got -> wait { guard second(m)!= $1; },
 got -> wait { guard second(m)==$1 && third(m)!=ENQ; sync out$1!third(m); },
 got -> enquire { guard second(m)==$1 && third(m)==ENQ; sync in$1?m; },
 enquire -> wait { guard m==0; },
 enquire -> wait { guard m!=0; sync to_medium!triple($1, first(m), second(m)); };

}
')

define(user, `process User$1 {
int m;
state wait, got, wrong_data;
init wait;
trans
 wait -> wait { sync in$1!0; }, // not interested
 wait -> wait { sync in$1!triple(eval($1%N+1), eval($1%N+1),0); },
 wait -> got { sync out$1?m; },
 got -> wait { guard $1 == m; },
 got -> wrong_data { guard $1 != m; };
}
')

forloop(x,1,N, `
slave(x)
user(x)
')

process Master {
byte next=1;
int m;
state send, wait;
init send;
trans
 send -> wait {  sync to_medium!triple(0,next,ENQ); },
 ifelse(ERROR,0, `wait -> send { guard Medium.wait && myloop(x,1,N,`Slave`'x.wait', `&& '); effect next = next %N +1 ;},
', ` wait -> send { guard Medium.wait && Slave1.wait; effect next = next %N +1 ;},
') //silence detection
 wait -> wait { sync from_medium0?m; };
}


system async;
