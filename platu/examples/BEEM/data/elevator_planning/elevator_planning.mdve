
define(IN, 255)

default(VERSION,1)

ifelse(VERSION,1,`
define(FLOORS,4)
define(CAPACITY,2)
define(N,3)
byte person[N] = { 0, 1, 2 };
 byte conflictA[N] = {1,0,0};
 byte conflictB[N] = {0,1,0};
 byte not_alone[N] = {1,0,0};
', VERSION,2,`
define(FLOORS,5)
define(CAPACITY,3)
define(N,5)
byte person[N] = { 0, 1, 2, 3, 4 };
 byte conflictA[N] = {1,0,0,1,1};
 byte conflictB[N] = {0,1,1};
 byte not_alone[N] = {1,1,0,0,0};
', VERSION,3,`
define(FLOORS,7)
define(CAPACITY,3)
define(N,7)
byte person[N] = { 0, 1, 2, 3, 4,0,3 };
 byte conflictA[N] = {1,0,0,1,1,0,0};
 byte conflictB[N] = {0,1,1,0,0,1,0};
 byte not_alone[N] = {1,1,0,0,0,0,0};
', VERSION, 44,`
define(FLOORS,8)
define(N,4)
define(CAPACITY,4)
byte person[N] = { 7,2,6,5};
 byte conflictA[N] = {0,0,0,0};
 byte conflictB[N] = {0,0,0,0};
 byte not_alone[N] = {0,0,0,0};
',`')


byte at = 0, inA=0, inB=0, in =0, alone=0;
byte i=0;

process Elevator {
state q, done;
init q;
trans
// done
q -> done { guard myloop(x,0,decr(N), `person[x]==0', ` and '); },
// getting in
forloop(x,0,decr(N), `
q -> q { guard 	person[x] == at && in <CAPACITY &&
		(conflictA[x]==0 || inB==0) &&
		(conflictB[x]==0 || inA==0) &&
		(not_alone[x]==0 || in>0);
	 effect person[x] = IN, in = in+1,
		inA = inA + conflictA[x], inB = inB + conflictB[x], alone = alone + not_alone[x]; },
')
// getting out
forloop(x,0,decr(N), `
q -> q { guard 	person[x] == IN &&
		(in>2 || (alone - not_alone[x]==0));
	 effect person[x] = at, in = in-1,
		inA = inA - conflictA[x], inB = inB - conflictB[x], alone = alone - not_alone[x]; },
')
// moving up/down
myloop(x,0,decr(FLOORS), `q -> q { effect at = x; }',`,
');

}

system async;