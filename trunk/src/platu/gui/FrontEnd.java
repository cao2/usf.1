package platu.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Properties;

import javax.swing.JFileChooser;

import platu.gui.Console;
import platu.gui.ConsoleEvent;
import platu.gui.ConsoleListener;
import platu.main.Main;
import platu.main.Options;

/**
 *
 * @author Andrew
 */

public class FrontEnd extends javax.swing.JFrame implements ConsoleListener {
	
	public static boolean GUILoaded = false;
	
    /** Creates new form FrontEnd */
    public FrontEnd() {
        initComponents();
        setComponents();
        GUILoaded = true;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        getCommand = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        dotPathField = new javax.swing.JTextField();
        stateFormatCombo = new javax.swing.JComboBox();
        SEARCH = new javax.swing.JLabel();
        POR = new javax.swing.JLabel();
        STATE_FORMAT = new javax.swing.JLabel();
        DOT_PATH = new javax.swing.JLabel();
        COMPOSITIONAL_MINIMIZATION = new javax.swing.JLabel();
        TIMING_ANALYSIS = new javax.swing.JLabel();
        VERBOSITY = new javax.swing.JLabel();
        porCombo = new javax.swing.JComboBox();
        searchCombo = new javax.swing.JComboBox();
        timingAnalysisCombo = new javax.swing.JComboBox();
        compositionalAnalysisCombo = new javax.swing.JComboBox();
        STICKY_SEMANTICS = new javax.swing.JCheckBox();
        NEW_PARSER_TAGS = new javax.swing.JCheckBox();
        verbositySpinner = new javax.swing.JSpinner();
        commandFileLabel = new javax.swing.JLabel();
        commandFile = new javax.swing.JTextField();
        findFile = new javax.swing.JButton();
        execButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        consoleTextbox = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        LPNListBox = new javax.swing.JTextPane();
        jPanel3 = new javax.swing.JPanel();
        LPNTranHeading = new javax.swing.JLabel();
        LPNTranData = new javax.swing.JLabel();
        ProjectStatesHeading = new javax.swing.JLabel();
        ProjectStateData = new javax.swing.JLabel();
        StackDepthHeading = new javax.swing.JLabel();
        StackDepthData = new javax.swing.JLabel();
        UsedMemoryHeading = new javax.swing.JLabel();
        UsedMemoryData = new javax.swing.JLabel();
        FreeMemoryHeading = new javax.swing.JLabel();
        FreeMemoryData = new javax.swing.JLabel();
        IterationsHeading = new javax.swing.JLabel();
        IterationsData = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        getCommand.setName("getCommand"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        dotPathField.setText("Enter text...");
        dotPathField.setName("dotPathField"); // NOI18N
        dotPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dotPathFieldActionPerformed(evt);
            }
        });

        stateFormatCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "explicit", "aig", "mdd", "bdd" }));
        stateFormatCombo.setName("stateFormatCombo"); // NOI18N

        SEARCH.setText("Search");
        SEARCH.setName("SEARCH"); // NOI18N

        POR.setText("POR");
        POR.setName("POR"); // NOI18N

        STATE_FORMAT.setText("State Format");
        STATE_FORMAT.setName("STATE_FORMAT"); // NOI18N

        DOT_PATH.setText("Dot Path");
        DOT_PATH.setName("DOT_PATH"); // NOI18N

        COMPOSITIONAL_MINIMIZATION.setText("Compositional Minimization");
        COMPOSITIONAL_MINIMIZATION.setName("COMPOSITIONAL_MINIMIZATION"); // NOI18N

        TIMING_ANALYSIS.setText("Timing Analysis");
        TIMING_ANALYSIS.setName("TIMING_ANALYSIS"); // NOI18N

        VERBOSITY.setText("Verbosity");
        VERBOSITY.setName("VERBOSITY"); // NOI18N

        porCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "off", "static", "behavioral"}));
        porCombo.setName("porCombo"); // NOI18N

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "dfs", "bfs", "compositional"}));
        searchCombo.setName("searchCombo"); // NOI18N

        timingAnalysisCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "zone", "poset", "off"}));
        timingAnalysisCombo.setName("timingAnalysisCombo"); // NOI18N

        compositionalAnalysisCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "abstraction", "reduction", "off"}));
        compositionalAnalysisCombo.setName("compositionalAnalysisCombo"); // NOI18N
        compositionalAnalysisCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compositionalAnalysisComboActionPerformed(evt);
            }
        });

        STICKY_SEMANTICS.setText("Sticky Semantics");
        STICKY_SEMANTICS.setName("STICKY_SEMANTICS"); // NOI18N

        NEW_PARSER_TAGS.setText("New Parser Tags");
        NEW_PARSER_TAGS.setName("NEW_PARSER_TAGS"); // NOI18N

        verbositySpinner.setName("verbositySpinner"); // NOI18N

        commandFileLabel.setText("Command File");
        commandFileLabel.setName("commandFileLabel"); // NOI18N

        commandFile.setText("Path To Command File");
        commandFile.setName("commandFile"); // NOI18N

        findFile.setText("Get Command File");
        findFile.setName("findFile"); // NOI18N

        execButton.setText("Execute");
        execButton.setName("execButton"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(DOT_PATH)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dotPathField))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(VERBOSITY)
                                .addComponent(TIMING_ANALYSIS)
                                .addComponent(COMPOSITIONAL_MINIMIZATION)
                                .addComponent(POR)
                                .addComponent(SEARCH)
                                .addComponent(STATE_FORMAT)
                                .addComponent(STICKY_SEMANTICS))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(NEW_PARSER_TAGS)
                                .addComponent(timingAnalysisCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(compositionalAnalysisCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(porCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(stateFormatCombo, 0, 225, Short.MAX_VALUE)
                                .addComponent(verbositySpinner))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(commandFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(commandFile, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(findFile, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(execButton, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DOT_PATH)
                    .addComponent(dotPathField, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VERBOSITY)
                    .addComponent(verbositySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TIMING_ANALYSIS)
                    .addComponent(timingAnalysisCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(COMPOSITIONAL_MINIMIZATION)
                    .addComponent(compositionalAnalysisCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(POR)
                    .addComponent(porCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SEARCH)
                    .addComponent(searchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(STATE_FORMAT)
                    .addComponent(stateFormatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(STICKY_SEMANTICS)
                    .addComponent(NEW_PARSER_TAGS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(commandFileLabel)
                    .addComponent(commandFile, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(execButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Begin Simulation", jPanel1);

        jPanel4.setName("jPanel4"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        consoleTextbox.setColumns(20);
        consoleTextbox.setEditable(false);
        consoleTextbox.setRows(5);
        consoleTextbox.setName("consoleOutputArea"); // NOI18N
        jScrollPane2.setViewportView(consoleTextbox);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Console", jPanel4);

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.setName("jPanel2"); // NOI18N

        jLabel1.setText("Imported LPNS");
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        LPNListBox.setEditable(false);
        LPNListBox.setName("LPNListBox"); // NOI18N
        jScrollPane1.setViewportView(LPNListBox);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setName("jPanel3"); // NOI18N

        LPNTranHeading.setText("LPN Transistion Firings:");
        LPNTranHeading.setName("LPNTranHeading"); // NOI18N

        LPNTranData.setText("0");
        LPNTranData.setName("LPNTranData"); // NOI18N

        ProjectStatesHeading.setText("Project States:");
        ProjectStatesHeading.setName("ProjectStatesHeading"); // NOI18N

        ProjectStateData.setText("0");
        ProjectStateData.setName("ProjectStateData"); // NOI18N

        StackDepthHeading.setText("Stack Depth:");
        StackDepthHeading.setName("StackDepthHeading"); // NOI18N

        StackDepthData.setText("0");
        StackDepthData.setName("StackDepthData"); // NOI18N

        UsedMemoryHeading.setText("Used Memory:");
        UsedMemoryHeading.setName("UsedMemoryHeading"); // NOI18N

        UsedMemoryData.setText("0");
        UsedMemoryData.setName("UsedMemoryData"); // NOI18N

        FreeMemoryHeading.setText("Free Memory:");
        FreeMemoryHeading.setName("FreeMemoryHeading"); // NOI18N

        FreeMemoryData.setText("0");
        FreeMemoryData.setName("FreeMemoryData"); // NOI18N

        IterationsHeading.setText("Iterations:");
        IterationsHeading.setName("IterationsHeading"); // NOI18N

        IterationsData.setText("0");
        IterationsData.setName("IterationsData"); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LPNTranHeading)
                    .addComponent(ProjectStatesHeading)
                    .addComponent(StackDepthHeading)
                    .addComponent(UsedMemoryHeading)
                    .addComponent(FreeMemoryHeading)
                    .addComponent(IterationsHeading))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IterationsData)
                    .addComponent(FreeMemoryData)
                    .addComponent(UsedMemoryData)
                    .addComponent(StackDepthData)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(ProjectStateData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LPNTranData)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IterationsHeading)
                    .addComponent(IterationsData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LPNTranHeading)
                    .addComponent(LPNTranData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProjectStatesHeading)
                    .addComponent(ProjectStateData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StackDepthHeading)
                    .addComponent(StackDepthData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UsedMemoryHeading)
                    .addComponent(UsedMemoryData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FreeMemoryHeading)
                    .addComponent(FreeMemoryData))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText("File");
        jMenu1.setName("jMenu1"); // NOI18N
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

private void compositionalAnalysisComboActionPerformed(java.awt.event.ActionEvent evt) {                                                           
// TODO add your handling code here:
}                                                          

private void dotPathFieldActionPerformed(java.awt.event.ActionEvent evt) {                                             
// TODO add your handling code here:
}                                            

    /**
     * @param args the command line arguments
     */
    public static void createGUI() {
    	
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrontEnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrontEnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrontEnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrontEnd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FrontEnd().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private javax.swing.JLabel COMPOSITIONAL_MINIMIZATION;
    private javax.swing.JLabel DOT_PATH;
    private javax.swing.JLabel FreeMemoryData;
    private javax.swing.JLabel FreeMemoryHeading;
    private javax.swing.JLabel IterationsData;
    private javax.swing.JLabel IterationsHeading;
    private javax.swing.JTextPane LPNListBox;
    private javax.swing.JLabel LPNTranData;
    private javax.swing.JLabel LPNTranHeading;
    private javax.swing.JCheckBox NEW_PARSER_TAGS;
    private javax.swing.JLabel POR;
    private javax.swing.JLabel ProjectStateData;
    private javax.swing.JLabel ProjectStatesHeading;
    private javax.swing.JLabel SEARCH;
    private javax.swing.JLabel STATE_FORMAT;
    private javax.swing.JCheckBox STICKY_SEMANTICS;
    private javax.swing.JLabel StackDepthData;
    private javax.swing.JLabel StackDepthHeading;
    private javax.swing.JLabel TIMING_ANALYSIS;
    private javax.swing.JLabel UsedMemoryData;
    private javax.swing.JLabel UsedMemoryHeading;
    private javax.swing.JLabel VERBOSITY;
    private javax.swing.JTextField commandFile;
    private javax.swing.JLabel commandFileLabel;
    private javax.swing.JComboBox compositionalAnalysisCombo;
    private javax.swing.JTextField dotPathField;
    private javax.swing.JButton execButton;
    private javax.swing.JButton findFile;
    private javax.swing.JFileChooser getCommand;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea consoleTextbox;
    private javax.swing.JComboBox porCombo;
    private javax.swing.JComboBox searchCombo;
    private javax.swing.JComboBox stateFormatCombo;
    private javax.swing.JComboBox timingAnalysisCombo;
    private javax.swing.JSpinner verbositySpinner;
    
    static boolean running = false;
    static Thread curThread;
    
//Added to execute listener
    private void submitProperties() 
{
	//Set the properties of the fields
	Properties newProps = new Properties();
	
	newProps.put(DOT_PATH.getName(), dotPathField.getText().toLowerCase());
	newProps.put(SEARCH.getName(), searchCombo.getSelectedItem().toString().toLowerCase());
	newProps.put(STATE_FORMAT.getName(), stateFormatCombo.getSelectedItem().toString().toLowerCase());
	newProps.put(POR.getName(), porCombo.getSelectedItem().toString().toLowerCase());
	newProps.put(TIMING_ANALYSIS.getName(), timingAnalysisCombo.getSelectedItem().toString().toLowerCase());
	newProps.put(COMPOSITIONAL_MINIMIZATION.getName(), compositionalAnalysisCombo.getSelectedItem().toString().toLowerCase());
	newProps.put(STICKY_SEMANTICS.getName(), (Boolean)STICKY_SEMANTICS.isSelected());
	newProps.put(NEW_PARSER_TAGS.getName(), NEW_PARSER_TAGS.isSelected());
	newProps.put(VERBOSITY.getName(), verbositySpinner.getValue());
	
	/**
	System.out.println(newProps.get(DOT_PATH.getName()));
	System.out.println(newProps.get(SEARCH.getName()));
	System.out.println(newProps.get(STATE_FORMAT.getName()));
	System.out.println(newProps.get(TIMING_ANALYSIS.getName()));
	System.out.println(newProps.get(COMPOSITIONAL_MINIMIZATION.getName()));
	System.out.println(newProps.get(STICKY_SEMANTICS.getName()));
	System.out.println(newProps.get(NEW_PARSER_TAGS.getName()));
	System.out.println(newProps.get(VERBOSITY.getName()));**/
	if(!running)
	{
		try 
		{
			Options.setOptions(newProps);
			
			Runnable r = new Runnable()
			{
				public void run()
				{
					new Main(commandFile.getText());
				}
			};
			
			curThread = new Thread(r);
			curThread.start();
		} 
		
		catch (Exception e) 
		{
			consoleTextbox.setText(consoleTextbox.getText() + "\n" + e.getMessage());
		}
		
		execButton.setText("Terminate");
		running = true;
	}
	
	else
	{
		curThread.stop();
		execButton.setText("Execute");
		running = false;
	}
}

//Added to find button listener
	private void getCommandFile()
	{
		int returnVal = getCommand.showOpenDialog(this);
		
		if(returnVal == JFileChooser.APPROVE_OPTION)
		{
			commandFile.setText(getCommand.getSelectedFile().getAbsolutePath());
		}
		
		else{}
	}


	private void setComponents()
	{
        this.setTitle("Platu");

        getCommand.setName("getCommand"); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        dotPathField.setText("Enter text...");
        dotPathField.setName("dotPathField"); // NOI18N
        
        String args[] = new String[Options.StateFormatDef.values().length];
    	for(int i = 0; i < args.length; i++)
    	{
    		args[i] = Options.StateFormatDef.values()[i].toString();
    	}

        stateFormatCombo.setModel(new javax.swing.DefaultComboBoxModel(args));
        stateFormatCombo.setName("stateFormatCombo"); // NOI18N

        SEARCH.setText("Search");
        SEARCH.setName("SEARCH"); // NOI18N

        POR.setText("POR");
        POR.setName("POR"); // NOI18N

        STATE_FORMAT.setText("State Format");
        STATE_FORMAT.setName("STATE_FORMAT"); // NOI18N

        DOT_PATH.setText("Dot Path");
        DOT_PATH.setName("DOT_PATH"); // NOI18N

        COMPOSITIONAL_MINIMIZATION.setText("Compositional Minimization");
        COMPOSITIONAL_MINIMIZATION.setName("COMPOSITIONAL_MINIMIZATION"); // NOI18N

        TIMING_ANALYSIS.setText("Timing Analysis");
        TIMING_ANALYSIS.setName("TIMING_ANALYSIS"); // NOI18N

        VERBOSITY.setText("Verbosity");
        VERBOSITY.setName("VERBOSITY"); // NOI18N
        
        args = new String[Options.PorDef.values().length];
    	for(int i = 0; i < args.length; i++)
    	{
    		args[i] = Options.PorDef.values()[i].toString();
    	}

        porCombo.setModel(new javax.swing.DefaultComboBoxModel(args));
        porCombo.setName("porCombo"); // NOI18N
        
        args = new String[Options.SearchTypeDef.values().length];
    	for(int i = 0; i < args.length; i++)
    	{
    		args[i] = Options.SearchTypeDef.values()[i].toString();
    	}

        searchCombo.setModel(new javax.swing.DefaultComboBoxModel(args));
        searchCombo.setName("searchCombo"); // NOI18N
        
        args = new String[Options.timingAnalysisDef.values().length];
    	for(int i = 0; i < args.length; i++)
    	{
    		args[i] = Options.timingAnalysisDef.values()[i].toString();
    	}

        timingAnalysisCombo.setModel(new javax.swing.DefaultComboBoxModel(args));
        timingAnalysisCombo.setName("timingAnalysisCombo"); // NOI18N

        //Needs to be connected to the enum
        compositionalAnalysisCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "abstraction", "reduction", "off"}));
        compositionalAnalysisCombo.setName("compositionalAnalysisCombo"); // NOI18N

        STICKY_SEMANTICS.setText("Sticky Semantics");
        STICKY_SEMANTICS.setName("STICKY_SEMANTICS"); // NOI18N

        NEW_PARSER_TAGS.setText("New Parser Tags");
        NEW_PARSER_TAGS.setName("NEW_PARSER_FLAG"); // NOI18N

        verbositySpinner.setName("verbositySpinner"); // NOI18N

        commandFileLabel.setText("Command File");
        commandFileLabel.setName("commandFileLabel"); // NOI18N

        commandFile.setText("Path To Command File");
        commandFile.setName("commandFile"); // NOI18N

        findFile.setText("Get Commands");
        findFile.setName("findFile"); // NOI18N
        findFile.addActionListener(new ActionListener()
        {
        	public void actionPerformed(ActionEvent e) 
        	{
        		getCommandFile();
        	}
        });

        execButton.setText("Execute");
        execButton.setName("execButton"); // NOI18N
        execButton.addActionListener(new ActionListener()
        {
        	public void actionPerformed(ActionEvent e)
        	{
        		submitProperties();
        	}
        });
	
        Console.addConsoleEventListener(this);
	}


	public void ConsoleEventOccurred(ConsoleEvent e) 
	{
		/**
		//if it is information from the progress of a running search...
		if(e.getEventType().equals(ConsoleEvent.eventType.progressData))
		{
			float[] info = (float[]) Console.getInformation(ConsoleEvent.eventType.progressData);
			IterationsData.setText(""+info[0]);
			LPNTranData.setText(""+info[1]);
			ProjectStateData.setText(""+info[2]);
			StackDepthData.setText(""+info[3]);
			UsedMemoryData.setText(""+info[4]);
			FreeMemoryData.setText(""+info[5]);
		}
		
		else if(e.getEventType().equals(ConsoleEvent.eventType.textConsole))
		{
			String data = (String) Console.getInformation(ConsoleEvent.eventType.textConsole);
			consoleTextbox.setText(consoleTextbox.getText()+"\n"+data);
		}
		
		else if(e.getEventType().equals(ConsoleEvent.eventType.lpnImport))
		{
			String data = (String) Console.getInformation(ConsoleEvent.eventType.lpnImport);
			LPNListBox.setText(LPNListBox.getText() + "\n" + data);			
		}**/
	}
}
