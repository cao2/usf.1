










channel to_medium;
channel from_medium0, in0, out0;
channel from_medium1, in1, out1;
channel from_medium2, in2, out2;
channel from_medium3, in3, out3;
channel from_medium4, in4, out4;
channel from_medium5, in5, out5;



process Medium {
int m;
byte i;
state wait, got, broadcast, collision;
init wait;
trans
 wait -> wait { sync to_medium?m; }, // loss incoming message
 wait -> got { sync to_medium?m;},

 got -> collision { sync to_medium?m; },
 got -> broadcast { effect i=0; },
 broadcast -> broadcast { guard i == ((m)%10); effect i = i+1;},
 broadcast -> broadcast { guard i != ((m)%10) && i <= 5; effect i = i+1; }, // loss of outgoing msg
 broadcast -> broadcast { guard 0 != ((m)%10) && 0==i; sync from_medium0!m; effect i = i+1; },
 broadcast -> broadcast { guard 1 != ((m)%10) && 1==i; sync from_medium1!m; effect i = i+1; },
 broadcast -> broadcast { guard 2 != ((m)%10) && 2==i; sync from_medium2!m; effect i = i+1; },
 broadcast -> broadcast { guard 3 != ((m)%10) && 3==i; sync from_medium3!m; effect i = i+1; },
 broadcast -> broadcast { guard 4 != ((m)%10) && 4==i; sync from_medium4!m; effect i = i+1; },
 broadcast -> broadcast { guard 5 != ((m)%10) && 5==i; sync from_medium5!m; effect i = i+1; },

 broadcast -> wait { guard i == 5+1 ; }; 
}






process Slave1 {
int m;
state wait, got, enquire;
init wait;
trans
 wait -> got { sync from_medium1?m; },
 got -> wait { guard (((m)%(10*10))/10)!= 1; },
 got -> wait { guard (((m)%(10*10))/10)==1 && ((m)/(10*10))!=0; sync out1!((m)/(10*10)); },
 got -> enquire { guard (((m)%(10*10))/10)==1 && ((m)/(10*10))==0; sync in1?m; },
 enquire -> wait { guard m==0; },
 enquire -> wait { guard m!=0; sync to_medium!((1)+(((m)%10))*10+((((m)%(10*10))/10)*10*10)); };

}

process User1 {
int m;
state wait, got, wrong_data;
init wait;
trans
 wait -> wait { sync in1!0; }, // not interested
 wait -> wait { sync in1!((2)+(2)*10+(0*10*10)); },
 wait -> got { sync out1?m; },
 got -> wait { guard 1 == m; },
 got -> wrong_data { guard 1 != m; };
}


process Slave2 {
int m;
state wait, got, enquire;
init wait;
trans
 wait -> got { sync from_medium2?m; },
 got -> wait { guard (((m)%(10*10))/10)!= 2; },
 got -> wait { guard (((m)%(10*10))/10)==2 && ((m)/(10*10))!=0; sync out2!((m)/(10*10)); },
 got -> enquire { guard (((m)%(10*10))/10)==2 && ((m)/(10*10))==0; sync in2?m; },
 enquire -> wait { guard m==0; },
 enquire -> wait { guard m!=0; sync to_medium!((2)+(((m)%10))*10+((((m)%(10*10))/10)*10*10)); };

}

process User2 {
int m;
state wait, got, wrong_data;
init wait;
trans
 wait -> wait { sync in2!0; }, // not interested
 wait -> wait { sync in2!((3)+(3)*10+(0*10*10)); },
 wait -> got { sync out2?m; },
 got -> wait { guard 2 == m; },
 got -> wrong_data { guard 2 != m; };
}


process Slave3 {
int m;
state wait, got, enquire;
init wait;
trans
 wait -> got { sync from_medium3?m; },
 got -> wait { guard (((m)%(10*10))/10)!= 3; },
 got -> wait { guard (((m)%(10*10))/10)==3 && ((m)/(10*10))!=0; sync out3!((m)/(10*10)); },
 got -> enquire { guard (((m)%(10*10))/10)==3 && ((m)/(10*10))==0; sync in3?m; },
 enquire -> wait { guard m==0; },
 enquire -> wait { guard m!=0; sync to_medium!((3)+(((m)%10))*10+((((m)%(10*10))/10)*10*10)); };

}

process User3 {
int m;
state wait, got, wrong_data;
init wait;
trans
 wait -> wait { sync in3!0; }, // not interested
 wait -> wait { sync in3!((4)+(4)*10+(0*10*10)); },
 wait -> got { sync out3?m; },
 got -> wait { guard 3 == m; },
 got -> wrong_data { guard 3 != m; };
}


process Slave4 {
int m;
state wait, got, enquire;
init wait;
trans
 wait -> got { sync from_medium4?m; },
 got -> wait { guard (((m)%(10*10))/10)!= 4; },
 got -> wait { guard (((m)%(10*10))/10)==4 && ((m)/(10*10))!=0; sync out4!((m)/(10*10)); },
 got -> enquire { guard (((m)%(10*10))/10)==4 && ((m)/(10*10))==0; sync in4?m; },
 enquire -> wait { guard m==0; },
 enquire -> wait { guard m!=0; sync to_medium!((4)+(((m)%10))*10+((((m)%(10*10))/10)*10*10)); };

}

process User4 {
int m;
state wait, got, wrong_data;
init wait;
trans
 wait -> wait { sync in4!0; }, // not interested
 wait -> wait { sync in4!((5)+(5)*10+(0*10*10)); },
 wait -> got { sync out4?m; },
 got -> wait { guard 4 == m; },
 got -> wrong_data { guard 4 != m; };
}


process Slave5 {
int m;
state wait, got, enquire;
init wait;
trans
 wait -> got { sync from_medium5?m; },
 got -> wait { guard (((m)%(10*10))/10)!= 5; },
 got -> wait { guard (((m)%(10*10))/10)==5 && ((m)/(10*10))!=0; sync out5!((m)/(10*10)); },
 got -> enquire { guard (((m)%(10*10))/10)==5 && ((m)/(10*10))==0; sync in5?m; },
 enquire -> wait { guard m==0; },
 enquire -> wait { guard m!=0; sync to_medium!((5)+(((m)%10))*10+((((m)%(10*10))/10)*10*10)); };

}

process User5 {
int m;
state wait, got, wrong_data;
init wait;
trans
 wait -> wait { sync in5!0; }, // not interested
 wait -> wait { sync in5!((1)+(1)*10+(0*10*10)); },
 wait -> got { sync out5?m; },
 got -> wait { guard 5 == m; },
 got -> wrong_data { guard 5 != m; };
}



process Master {
byte next=1;
int m;
state send, wait;
init send;
trans
 send -> wait {  sync to_medium!((0)+(next)*10+(0*10*10)); },
 wait -> send { guard Medium.wait && Slave1.wait && Slave2.wait && Slave3.wait && Slave4.wait && Slave5.wait ; effect next = next %5 +1 ;},
 //silence detection
 wait -> wait { sync from_medium0?m; };
}


system async;
