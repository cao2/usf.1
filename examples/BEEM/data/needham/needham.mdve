
default(I,1)
default(R,1)

define(TR,15)
define(triple,`(($1)+($2)*TR+($3*TR*TR))')
define(first, `(($1)%TR)')
define(second, `((($1)%(TR*TR))/TR)')
define(third, `(($1)/(TR*TR))')

define(NULL, 0)
define(Na0, 1)
define(Na1, 2)
define(Na2, 3)
define(Nb0, 4)
define(Nb1, 5)
define(Nb2, 6)
define(A0, 7)
define(A1, 8)
define(A2, 9)
define(B0, 10)
define(B1, 11)
define(B2, 12)
define(Gd, 13)
define(I, 14)
define(Na, Na0)
define(Nb, Nb0)
define(A,A0)
define(B,B0)

channel net_N_P_P; // nounce, public key, public key
channel net_N_N_P; // nounce, nounce, public key
channel net_N_P; //nounce, public key

define(initiator,`process initiator_$1 {
int m, party_nonce;
state start, wait_resp, got_resp, commited, finished, corrupted;
init start;
trans
 start -> wait_resp { sync net_N_P_P!triple(Na$1,A$1,B$1); },
 wait_resp -> got_resp { sync net_N_N_P?m; },
 got_resp -> commited { guard first(m) == Na$1 && third(m) == A$1; effect party_nonce = second(m); },
 got_resp -> corrupted { guard not(first(m) == Na$1 && third(m) == A$1); }, 
 commited -> finished { sync net_N_P!triple(party_nonce,B$1,NULL);};
}
')

forloop(x, 0, decr(I), `initiator(x)')

define(responder, `process responder_$1 {
int m, party, party_nonce;
state start, got_msg, send_reply, wait_resp, got_resp, finished, corrupted;
init start;
trans
 start -> got_msg { sync net_N_P_P?m; },
 got_msg -> send_reply { guard third(m) == B$1; effect party = second(m), party_nonce = first(m);},
 got_msg -> corrupted {guard not(third(m) == B$1); },
 send_reply -> wait_resp { sync net_N_N_P!triple(party_nonce, Nb$1, party); },
 wait_resp -> got_resp { sync net_N_P?m; },
 got_resp -> corrupted { guard not(first(m) == Nb$1 && second(m) == B$1); },
 got_resp -> finished { guard first(m) == Nb$1 && second(m) == B$1; };
}
')

forloop(x, 0, decr(R), `responder(x)')

process intruder {
byte kNa=0, kNb=0, k_Na_Nb__A =0, k_Na_A__B=0, k_Nb__B=0;
int m;
state q, got3, c1, c2, d1, got2, e1, f1;
init q;
trans
 // catch message... 
 q -> got3 { sync net_N_N_P?m; },
 q -> got3 { sync net_N_P_P?m; },
 q -> got2 { sync net_N_P?m; },

 got3 -> q {},
 got3 -> c1 { guard third(m) == I; },
 got3 -> d1 { guard third(m) != I; },

 c1 -> c2 { guard first(m) == Na; effect kNa =1;},
 c1 -> c2 { guard first(m) == Nb; effect kNb =1;},
 c1 -> c2 { guard first(m) != Na && first(m) != Nb; },

 c2 -> q { guard first(m) == Nb && second(m) == B; effect k_Nb__B=1; },
 c2 -> q { guard not (first(m) == Nb && second(m) == B); },

 d1 -> q { guard first(m) == Na && second(m) == A && third(m) == B;
	   effect k_Na_A__B=1;},
 d1 -> q { guard first(m) == Na && second(m) == Nb && third(m) == A;
	   effect k_Na_Nb__A=1;},
 d1 -> q { },

 got2 -> e1 { guard second(m)==I; },
 got2 -> f1 { guard second(m)!=I; },

 e1 -> q { guard first(m) == Na; effect kNa = 1; },
 e1 -> q { guard first(m) == Nb; effect kNb = 1; },
 e1 -> q { guard first(m) != Na && first(m) != Nb; },

 f1 -> q { guard first(m) == Nb && second(m) ==B; effect k_Nb__B=1; },
 f1 -> q { guard not ( first(m) == Nb && second(m) ==B); }, 

 //sends
 q -> q { sync net_N_P_P!triple(Gd,A,B); },
 q -> q { sync net_N_P_P!triple(Gd,B,B); },
 q -> q { sync net_N_P_P!triple(Gd,I,B); },
 q -> q { sync net_N_P_P!triple(A,A,B); },
 q -> q { sync net_N_P_P!triple(A,B,B); },
 q -> q { sync net_N_P_P!triple(A,I,B); },
 q -> q { sync net_N_P_P!triple(B,A,B); },
 q -> q { sync net_N_P_P!triple(B,B,B); },
 q -> q { sync net_N_P_P!triple(B,I,B); },
 q -> q { sync net_N_P_P!triple(I,A,B); },
 q -> q { sync net_N_P_P!triple(I,B,B); },
 q -> q { sync net_N_P_P!triple(I,I,B); },

 q -> q { guard  kNa==1 ; sync net_N_N_P!triple(Na,Na,A); },
 q -> q { guard  kNa==1 && kNb ==1 || k_Na_Nb__A==1 ; sync net_N_N_P!triple(Na,Nb,A); },
 q -> q { guard  kNa==1 ; sync net_N_N_P!triple(Na,Gd,A); },
 q -> q { guard  kNa==1 ; sync net_N_P_P!triple(Na,A,A); },
 q -> q { guard  kNa==1 ; sync net_N_P_P!triple(Na,B,A); },
 q -> q { guard  kNa==1 ; sync net_N_P_P!triple(Na,I,A); },
 q -> q { guard  kNa==1 || k_Na_A__B; sync net_N_P_P!triple(Na,A,B); },
 q -> q { guard  kNa==1 ; sync net_N_P_P!triple(Na,B,B); },
 q -> q { guard  kNa==1 ; sync net_N_P_P!triple(Na,I,B); },
 q -> q { guard  kNb==1 ; sync net_N_P_P!triple(Nb,A,B); },
 q -> q { guard  kNb==1 ; sync net_N_P_P!triple(Nb,B,B); },
 q -> q { guard  kNb==1 ; sync net_N_P_P!triple(Nb,I,B); },

 q -> q { guard  kNb==1 || k_Nb__B ==1; sync net_N_P!triple(Nb,B,NULL); };

}

system async;