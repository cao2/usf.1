
// the basic version, N philosophers

   
byte fork[6];

process phil_0 {
state think, one, eat, finish;
init think;
trans 
 think -> one {guard fork[1] == 0; effect fork[1] = 1;},
 one -> eat {guard fork[0] == 0; effect fork[0] = 1;},
 eat -> finish {effect fork[1] = 0; },
 finish -> think {effect fork[0] = 0; };
}

 process phil_1 {
state think, one, eat, finish;
init think;
trans 
 think -> one {guard fork[1] == 0; effect fork[1] = 1;},
 one -> eat {guard fork[2] == 0; effect fork[2] = 1;},
 eat -> finish {effect fork[1] = 0; },
 finish -> think {effect fork[2] = 0; };
}

process phil_2 {
state think, one, eat, finish;
init think;
trans 
 think -> one {guard fork[2] == 0; effect fork[2] = 1;},
 one -> eat {guard fork[3] == 0; effect fork[3] = 1;},
 eat -> finish {effect fork[2] = 0; },
 finish -> think {effect fork[3] = 0; };
}

process phil_3 {
state think, one, eat, finish;
init think;
trans 
 think -> one {guard fork[3] == 0; effect fork[3] = 1;},
 one -> eat {guard fork[4] == 0; effect fork[4] = 1;},
 eat -> finish {effect fork[3] = 0; },
 finish -> think {effect fork[4] = 0; };
}

process phil_4 {
state think, one, eat, finish;
init think;
trans 
 think -> one {guard fork[4] == 0; effect fork[4] = 1;},
 one -> eat {guard fork[5] == 0; effect fork[5] = 1;},
 eat -> finish {effect fork[4] = 0; },
 finish -> think {effect fork[5] = 0; };
}

process phil_5 {
state think, one, eat, finish;
init think;
trans 
 think -> one {guard fork[5] == 0; effect fork[5] = 1;},
 one -> eat {guard fork[0] == 0; effect fork[0] = 1;},
 eat -> finish {effect fork[5] = 0; },
 finish -> think {effect fork[0] = 0; };
}

process LTL_property {
state q1, q2;
init q1;
accept q2;
trans
q1 -> q1 {},
q1 -> q2 { guard (phil_0.one) && not (phil_0.eat); },
q2 -> q2 { guard not (phil_0.eat); };
}

system async property LTL_property;
